---
# seq 201 999 must be replaced with calls to read SYS_{UID,GID}_{MIN,MAX} from /etc/login.defs
# Generates to 201 to 999, all possible system UIDs expected for Fedora Server
# right join (all UIDs currently in use, all possible system UIDs) and select a random unused system UID from output
- name: Find unused system UIDs
  ansible.builtin.shell: "userdbctl user --no-pager --output=classic | cut -f3 -d: | awk '$1 < 1000' | sort | comm <(seq 201 999 | sort) - -2 -3"
  register: unused_uids
  args:
    excutable: /bin/bash # because <(...) syntax is bash only, for stdout into file name reference

- name: Find unusued system GIDs
  ansible.builtin.shell: "userdbctl group --no-pager --output=classic | cut -f3 -d: | awk '$1 < 1000' | sort | comm <(seq 201 999 | sort) - -2 -3"
  register: unused_gids
  args:
    excutable: /bin/bash # because <(...) syntax is bash only, for stdout into file name reference

# ansible.builtin.user would be better but that module does not support -F/--add-subids-for-system
# Wait maybe I can just use a non system user but pass the right args to make it functionally the same so useradd knows
# to add the subids automatically as it is a non system user
# Seems like system users just have a UID/GID  < 1000? SYS_UID_{MIN,MAX} in /etc/login.defs
- name: Create {{ item }} user
  ansible.builtin.user:
    name: {{ item  }}
    create_home: true
    state: present
    system: true
    uid: "{{ unused_uids.stdout | random }}" # choose random unused value
    gid: "{{ unused_gids.stdout | random }}" # choose random unused value

# Do I even need this if I place quadlets in /etc/
- name: Set {{ item }} user to linger on login
  ansible.builtin.command: "loginctl enable-linger {{ item }}"

- name: Get the {{ item }} user's home dir
  ansible.builtin.shell: "userdbctl user {{ item  }} --output=classic | cut -f6 -d:"
  register: user_home_dir

- name: Copy over quadlets
  ansible.builtin.copy:
    dest: "{{ user_home_dir.stdout | quote }}/.config/containers/systemd/"
    mode: u=r,g=r
    src: files/{{ item }}/
    group: "{{ item }}"
    owner: "{{ item }}"
