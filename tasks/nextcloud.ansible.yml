---

- name: Core logic to create all users and containers
  ansible.builtin.include_tasks: data_group_assign.ansible.yml

- name: Ensure the postgres container
  become: true
  become_user: nextcloud
  containers.podman.podman_container:
    name: postgres
    state: quadlet
    image: docker.io/library/postgres:16.3
    quadlet_dir: /home/nextcloud/.config/containers/systemd
    env:
      POSTGRES_DB_FILE: /run/secrets/.postgres_db_nextcloud_name
      POSTGRES_USER_FILE: /run/secrets/.postgres_user_nextcloud_name
      POSTGRES_PASSWORD_FILE: /run/secrets/.postgres_nextcloud_passwd
    volumes:
      - /home/nextcloud/secrets/postgres/:/run/secrets/:Z,noexec
      - /home/nextcloud/postgres_data:/var/lib/postgresql/data:z,noexec
    quadlet_options:
      - |
        [Install]
        WantedBy=nextcloud_cron.service
        WantedBy=nextcloud_app.service
        [Service]
        Restart=always

- name: Ensure the redis cache
  become: true
  become_user: nextcloud
  containers.podman.podman_container:
    name: redis
    image: docker.io/library/redis:alpine
    state: quadlet
    quadlet_dir: /home/nextcloud/.config/containers/systemd
    quadlet_options:
      - |
        [Install]
        WantedBy=nextcloud_nextcloud_cron.service
        WantedBy=nextcloud_app.service
        [Service]
        Restart=always

- name: Ensure the nextcloud application with apache webserver
  become: true
  become_user: nextcloud
  containers.podman.podman_container:
    name: nextcloud_app
    image: docker.io/library/nextcloud:apache
    state: quadlet
    volume:
      - /home/nextcloud/nextcloud_app_data:/var/www/html:Z
      - /home/nextcloud/postgres_data:/var/lib/postgresql/data:z,noexec
    quadlet_dir: /home/nextcloud/.config/containers/systemd
    env:
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
    quadlet_options:
      - |
        [Install]
        WantedBy=default.target
        [Service]
        Restart=always

- name: Ensure the nextcloud cron task
  become: true
  become_user: nextcloud
  containers.podman.podman_container:
    name: nextcloud_cron
    image: docker.io/library/nextcloud:apache
    entrypoint: /cron.sh
    quadlet_options:
      - |
        [Install]
        WantedBy=nextcloud_app.service
        [Service]
        Restart=always

- name: Ensure the restic backups for nextcloud data dir and postgres
  become: true
  become_user: nextcloud
  ansible.builtin.copy:
    dest: /home/nextcloud/nextcloud_backup.sh
    group: nextcloud
    owner: nextcloud
    mode: '600'
    validate: bash -n %s
    content: |
      #!/usr/bin/bash
      set -euo pipefail
      export HISTCONTROL=ignorespace
      # Leading space is important here
       export AWS_ACCESS_KEY_ID=$(cat secrets/restic/.wasabi_access_key_id)
       export AWS_SECRET_ACCESS_KEY=$(cat secrets/restic/.wasabi_secret_access_key)

      # This should be a no-op if the repo already exists
      restic init

      if ! restic check; then
          printf "Pre backup check failed\n" >&2
          exit 31
      fi

      php occ maintenance:mode --on

      # Leading spaces matters here
      # TODO: We dump with --format=plain by default, --format=directory or =tar is more better
      # but requires --file for output and mounting the backup staging volume for the container.
      # For now just pipe to stdout for easy host access
       podman exec \
        --env PGPASSWORD=$(cat secrets/postgres/.postgres_nextcloud_passwd) \
        --env PGDATABASE=$(cat secrets/postgres/.postgres_db_nextcloud_name) \
        --env PGHOST=postgres \
        --env PGUSER=$(cat secrets/postgres/.postgres_user_nextcloud_name) \
        postgres pg_dump --no-password > /home/nextcloud/nextcloud_app_data/postgres_dump.sql

      # We put the SQL dump here with the other nextcloud files for easy backup
      restic backup /home/nextcloud/nextcloud_app_data/ -vvv

      php occ maintenance:mode --off

      if ! restic check; then
          printf "Post backup check failed\n" >&2
          exit 63
      fi

      restic forget --keep-daily 7 --keep-hourly 7 --keep-weekly 7 --prune

      if ! restic check; then
          printf "Post prune check failed\n" >&2
          exit 127
      fi

      printf "postgres DB and nextcloud app backup completed\n"
