---

# TODO: Maybe put this all in a dedicated zone,
# and then I can just recreate the zone to recreate all firewall rules easily?
# Maybe 1 zone per user account or 1 zone per container?
- name: Open host firewall ports for deluge/gluetun
  become: true
  become_user: root
  ansible.posix.firewalld:
    port: "{{ item }}"
    immediate: true
    permanent: true
    state: enabled
  loop:
    # TODO: Dedup with deluge quadlet below
    # TODO: Figure out deluge port forwarding
    - 8112/tcp
    - 6881/tcp
    - 6881/udp
    - 58846/tcp

# These two are needed by gluetun container, the former
# to access the /dev/net/tun device and the latter so the container
# may load/read firewall rules with nftables module. See if I can remove them,
# in git history in setup.sh there is links to github issues describing how to drop
# this sebool requirements for truly rootless
- name: Allow container to use host devices (viz. gluetun)
  become: true
  become_user: root
  ansible.posix.seboolean:
    name: container_use_devices
    state: true
    persistent: true

- name: Allow container to load host kernel modules (viz. gluetun)
  become: true
  become_user: root
  ansible.posix.seboolean:
    name: domain_kernel_load_modules
    state: true
    persistent: true

- name: Assign torrents user to data group for data dir access
  ansible.builtin.include_tasks: data_group_assign.ansible.yml

- name: Create proton backend for deluge state backups
  ansible.builtin.include_tasks: rclone_init.ansible.yml

- name: Ensure the gluetun container
  become: true
  become_user: torrents
  containers.podman.podman_container:
    image: docker.io/qmcgaw/gluetun:v3.38
    state: quadlet
    name: gluetun
    quadlet_dir: "/home/torrents/.config/containers/systemd"
    cap_add:
      - NET_ADMIN
    device:
      - /dev/net/tun
    volume:
      - "~/secrets/.wg0.conf:/gluetun/wireguard/wg0.conf:Z,noexec"
    env:
      VPN_SERVICE_PROVIDER: custom
      VPN_TYPE: wireguard
      VPN_PORT_FORWARDING: 'on'
      VPN_PORT_FORWARDING_PROVIDER: protonvpn
    quadlet_options:
      - |
        [Install]
        WantedBy=deluge.service
        WantedBy=default.target
        [Service]
        Restart=always
    ports:
      # 8112 is deluge web UI
      - 8112:8112
      # 6881 is data transfer/tracker announce
      - 6881:6881

      - 6881:6881/udp
      # 58846 is deluge GTK UI
      - 58846:58846

- name: Ensure the deluge container
  become: true
  become_user: torrents
  containers.podman.podman_container:
    name: deluge
    state: quadlet
    image: docker.io/linuxserver/deluge:2.1.1
    quadlet_dir: "/home/torrents/.config/containers/systemd"
    groups:
      - data
    volume:
      - "~/deluge_state/:/config:Z"
      - "/data/torrents:/downloads:z,noexec"
    env:
      TZ: America/Los_Angeles
      DELUGE_LOGLEVEL: info
      # PGID/PUID set the UID/GID used by the abc/deluge user within the container
      # So PUID: 1001 means within the container, root uid = 0, abc uid = 1001
      # This does not interact with host permissions
      PUID: 1001
    network: container:gluetun
    uidmap:
      # This image creates an abc user besides root in the container,
      # to run the deluge processes. `id -u abc` seems to always give 911,
      # even after multiple container recreates
      - 'u+1001:@{{ user_uid }}'
    gidmap:
      # This image creates an abc user besides root in the container
      # and makes abc a member of the 'users' group which has GID 1000
      - 'g+1000:@{{ data_group_gid }}'
    quadlet_options:
      - |
        [Install]
        WantedBy=default.target
        [Service]
        Restart=always

- name: Copy over deluge_state backup script for systemd timers
  become: true
  become_user: root
  ansible.builtin.copy:
    dest: ~/backup.sh
    group: torrents
    owner: torrents
    mode: '500'
    validate: bash -n %s
    content: |
      #!/usr/bin/bash
      set -euo pipefail
      export HISTCONTROL=ignorespace
      # Leading space is important here
       export RESTIC_REPOSITORY_FILE=~/secrets/.restic_repo_deluge_state
       export RESTIC_PASSWORD_FILE=~/secrets/.restic_passwd_deluge_state

      restic backup ~/deluge_state -vvv --read-concurrency 8

      if ! restic check; then
          printf "Post backup check failed\n"
          exit 63
      fi

      restic forget --keep-daily 7 --keep-hourly 7 --keep-weekly 7 --prune

      if ! restic check; then
          printf "Post prune check failed\n"
          exit 127
      fi
