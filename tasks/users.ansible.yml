---

- name: "Create user {{ username }}"
  become: true
  become_user: root
  ansible.builtin.user:
    name: "{{ username }}"
    state: present
    umask: '077'

- name: "Copy any secrets to new user named {{ username }}"
  become: true
  become_user: "{{ username }}"
  ansible.builtin.copy:
    dest: "/home/{{ username }}/secrets/"
    mode: '400'
    directory_mode: '500'
    src: secrets/{{ username }}/
    group: "{{ username }}"
    owner: "{{ username }}"

- name: "Set user to linger on login {{ username }}"
  become: true
  become_user: root
  ansible.builtin.command:
    cmd: "loginctl enable-linger {{ username }} --no-ask-password --no-pager"
    creates: "/var/lib/systemd/linger/{{ username }}"

- name: "Copy over unit files for user {{ username }}"
  become: true
  become_user: "{{ username }}"
  ansible.builtin.copy:
    src: "units/{{ username }}/"
    dest: "/home/{{ username }}/.config/systemd/user/"
    group: "{{ username }}"
    owner: "{{ username }}"
    mode: '400'
    directory_mode: '500'

- name: "Arrange quadlets, config, container specific permissions, etc for {{ username }}"
  ansible.builtin.include_tasks: "{{ username }}.ansible.yml"

- name: "List all systemd timers and quadlet units for user {{ username }}"
  become: true
  become_user: "{{ username }}"
  register: find_units_result
  changed_when: true
  ansible.builtin.find:
    path: "/home/{{ username }}/.config/"
    use_regex: true
    recurse: true
    patterns:
      # This assumes we only have timers to start and containers we are mapping to service files
      # If we have hand written .services without a timer this will fail
      - '.*\.container$'
      - '.*\.timer$'

- name: "Activate systemd timer and quadlet container units for {{ username }}"
  become: true
  become_user: "{{ username }}"
  loop: "{{ find_units_result.files | map(attribute='path') | map('ansible.builtin.basename') }}"
  ansible.builtin.systemd_service:
    # Regex here because timer units must be started with .timer extension, but systemctl wants quadlet units
    # to be enabled/started with .service or have no extension (systemd defaults to .service)
    name: "{{ item | regex_replace('\\.container$', '.service') }}"
    state: started
    enabled: true
    scope: user
    daemon_reload: true

# TODO: Ensure user started now and check that login is a success, container is up and stays up, etc
# If the container/user started earlier and stuff like file perms/selinux weren't yet set, we'll have issues
